<html>
  <head>
    <title>Wi-Fi Configuration</title>
    <link rel="stylesheet" href="/bower_components/house-style/house-style.min.css">
    <style type="text/css">
      table {
        width: 100%;
      }

      .hostname {
        text-align: right;
      }
    </style>
  </head>
  <body>
    <header class="masthead">
      <div class="grid">
        <div class="grid-col grid-8">
          <span class="dept"><%= product_name %></span>
        </div>
        <div class="hostname grid-col grid-4"><%= @host %></div>
      </div><!-- .grid -->
    </header>
    <div class="grid">
      <div class="project-header with-border grid-col grid-12 clearfix">
        <div>
          Wi-Fi Configuration
        </div>
      </div>
    </div><!-- .grid -->
    <div class="grid grid-bleed grid-internal-padding panel-border">
    <%= yield %>
    </div>
  <script src="/bower_components/reqwest/reqwest.min.js"></script>
  <script src="/bower_components/qwery/qwery.min.js"></script>
  <script>
    function parseTimeStringToMs(time) {
      if (time.indexOf('s') > -1) {
        return parseInt( time.replace('s', '') ) * 1000;
      } else if (time.indexOf('m') > -1) {
        return parseInt( time.replace('m', '') ) * 60 * 1000;
      } else if (/^\d+$/.test(time) > -1) {
        return time;
      }
    };

    function addLoading(el) {
      el.insertAdjacentHTML(
        'beforebegin',
        '<div class="loading-text transient is-inactive"><span class="loading loading-20"></span></div>'
      );
    };

    function showLoading(interval) {
      var loading = qwery('.loading-text')[0];
      loading.className = loading.className.replace('is-inactive', 'is-active');
      if (interval) {
        window.setTimeout(
          function () { hideLoading(); },
          interval
        );
      }
    };

    function hideLoading() {
      var loading = qwery('.loading-text')[0];
      loading.className = loading.className.replace('is-active', 'is-inactive');
    };

    function update(el, url) {
      showLoading( /* parseTimeStringToMs('1s') */ );
      reqwest({
        url: url,
        method: 'get',
        type: 'html',

      }).then(function (data) {
        el.innerHTML = data;
        hideLoading();
      });
    };

    /*
      Replace content in page tagged as "updateable"
    */
    var updateables = qwery('[data-updateable]'),
        updateable,
        url,
        interval,
        promise;
    for (var i = 0, len = updateables.length; i < len; i++) {
      updateable = updateables[i];
      url = window.location.toString();
      if (updateable.getAttribute('data-updateable-interval')) {
        interval = parseTimeStringToMs(
                      updateable.getAttribute('data-updateable-interval')
                  );
      } else {
        interval = 10000;
      }

      addLoading(updateable);

      window.setInterval( function () { update(updateable, url); }, interval);
    }

    /*
      TODO: Work out if this code is needed since on success
            the config app will not run.
    */
    var reloader = qwery('[data-polling]');
    if (reloader.length > 0) {
      reloader = reloader[0];
      var delay = parseTimeStringToMs(
                    reloader.getAttribute('data-polling-delay')
                  ),
          interval = parseTimeStringToMs( reloader.getAttribute('data-polling-interval') ),
          endpoint = reloader.getAttribute('data-polling-endpoint'),
          action   = reloader.getAttribute('data-polling-action');

      // wait a delay
      window.setTimeout(
        function () {
          // Then start polling
          window.setInterval(
            function () {
              reqwest({
                method: 'get',
                url: endpoint,
                type: 'html'
              }).then(function () {
                // when it succeeds
                window.location = action;
              })
            },
            interval
          )
        },
        delay
      );
    }

  </script>
  </body>
</html>
